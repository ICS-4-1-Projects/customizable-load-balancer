services:
  web:
    container_name: flask_app
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_PORT=${APP_PORT}
    command: gunicorn -w 4 -b 0.0.0.0:${APP_PORT} run:app
    volumes:
      - .:/usr/src/app
    ports:
      - "${APP_PORT}:${APP_PORT}"
    environment:
      - FLASK_ENV=${FLASK_ENV}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}
    depends_on:
      - db
      - redis
    networks:
      - app-network

  db:
    container_name: postgres_db
    image: postgres:13
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    environment:
      - postgres_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - app-network

  nginx:
    container_name: nginx_server
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available/${NGINX_ENV}.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/certs:/etc/ssl/certs
      - ./nginx/private:/etc/ssl/private
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    depends_on:
      - web
    networks:
      - app-network

  redis:
    container_name: redis_cache
    image: redis:alpine
    volumes:
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-data:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - app-network

  worker:
    container_name: celery_worker
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A celery_app.celery worker --loglevel=info
    volumes:
      - .:/usr/src/app
    depends_on:
      - web
      - redis
    networks:
      - app-network

volumes:
  postgres-data:
  redis-data:

networks:
  app-network:
    driver: bridge
    name: lab_network
